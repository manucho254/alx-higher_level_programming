"""
   class MyList that inherits from list:
       - Public instance method: def print_sorted(self): that prints the list, but sorted (ascending sort)

>>> MyList = __import__('1-my_list').MyList

testing for empty lists

>>> my_list = MyList()
>>> my_list
[]
>>> my_list.print_sorted()
[]
>>> my_list = MyList([])
>>> my_list
[]
>>> my_list.print_sorted()
[]

testing for list of integers

>>> my_list = MyList([1, 4, 2, 3, 5])
>>> my_list
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> my_list
[1, 4, 2, 3, 5]
>>> my_list.append(6)
>>> my_list
[1, 4, 2, 3, 5, 6]
>>> my_list.remove(6)
>>> my_list
[1, 4, 2, 3, 5]
>>> my_list = MyList([1])
>>> my_list
[1]
>>> my_list.print_sorted()
[1]
>>> my_list = MyList([-1, -2, -3, -4, -5])
>>> my_list
[-1, -2, -3, -4, -5]
>>> my_list.print_sorted()
[-5, -4, -3, -2, -1]

testing sortring strings in list
>>> my_list = MyList("look")
>>> my_list
['l', 'o', 'o', 'k']
>>> my_list.print_sorted()
['k', 'l', 'o', 'o']
>>> my_list = MyList(["cool", "fun", "nice", "happy"])
>>> my_list
['cool', 'fun', 'nice', 'happy']
>>> my_list.print_sorted()
['cool', 'fun', 'happy', 'nice']
>>> my_list = MyList("")
>>> my_list
[]
>>> my_list.print_sorted()
[]
>>> my_list = MyList(None)
Traceback (most recent call last):
   ...
TypeError: 'NoneType' object is not iterable

testing for invoking print_sorted with an argument
>>> my_list = MyList([1, 8, 5, 2])
>>> my_list.print_sorted(2)
Traceback (most recent call last):
    ...
TypeError: print_sorted() takes 1 positional argument but 2 were given

>>> my_list.print_sorted
<bound method MyList.print_sorted of [1, 8, 5, 2]>

>>> my_list = MyList([1, 2], [3, 4])
Traceback (most recent call last):
   ...
TypeError: list expected at most 1 argument, got 2

>>> my_list = MyList([])
>>> type(my_list)
<class '1-my_list.MyList'>

"""
